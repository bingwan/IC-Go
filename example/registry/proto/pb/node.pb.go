// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.2
// source: node.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConnectionEndpoint_Protocol int32

const (
	ConnectionEndpoint_PROTOCOL_UNSPECIFIED   ConnectionEndpoint_Protocol = 0
	ConnectionEndpoint_PROTOCOL_HTTP1         ConnectionEndpoint_Protocol = 1
	ConnectionEndpoint_PROTOCOL_HTTP1_TLS_1_3 ConnectionEndpoint_Protocol = 2
	ConnectionEndpoint_PROTOCOL_P2P1_TLS_1_3  ConnectionEndpoint_Protocol = 3
)

// Enum value maps for ConnectionEndpoint_Protocol.
var (
	ConnectionEndpoint_Protocol_name = map[int32]string{
		0: "PROTOCOL_UNSPECIFIED",
		1: "PROTOCOL_HTTP1",
		2: "PROTOCOL_HTTP1_TLS_1_3",
		3: "PROTOCOL_P2P1_TLS_1_3",
	}
	ConnectionEndpoint_Protocol_value = map[string]int32{
		"PROTOCOL_UNSPECIFIED":   0,
		"PROTOCOL_HTTP1":         1,
		"PROTOCOL_HTTP1_TLS_1_3": 2,
		"PROTOCOL_P2P1_TLS_1_3":  3,
	}
)

func (x ConnectionEndpoint_Protocol) Enum() *ConnectionEndpoint_Protocol {
	p := new(ConnectionEndpoint_Protocol)
	*p = x
	return p
}

func (x ConnectionEndpoint_Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionEndpoint_Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[0].Descriptor()
}

func (ConnectionEndpoint_Protocol) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[0]
}

func (x ConnectionEndpoint_Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionEndpoint_Protocol.Descriptor instead.
func (ConnectionEndpoint_Protocol) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{0, 0}
}

// A connection endpoint.
type ConnectionEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The IP address. Senders SHOULD use dotted-quad notation for IPv4 addresses
	// and RFC5952 representation for IPv6 addresses (which means that IPv6
	// addresses are *not* enclosed in `[` and `]`, as they are not written
	// with the port in the same field).
	//
	// Clients MUST be prepared to accept IPv6 addresses in the forms shown in
	// RFC4291.
	IpAddr string `protobuf:"bytes,1,opt,name=ip_addr,json=ipAddr,proto3" json:"ip_addr,omitempty"`
	Port   uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// Protocol that is used on this endpoint. If PROTOCOL_UNSPECIFIED then
	// code should default to PROTOCOL_HTTP1 for backwards compatability.
	Protocol ConnectionEndpoint_Protocol `protobuf:"varint,4,opt,name=protocol,proto3,enum=registry.node.v1.ConnectionEndpoint_Protocol" json:"protocol,omitempty"`
}

func (x *ConnectionEndpoint) Reset() {
	*x = ConnectionEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionEndpoint) ProtoMessage() {}

func (x *ConnectionEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionEndpoint.ProtoReflect.Descriptor instead.
func (*ConnectionEndpoint) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{0}
}

func (x *ConnectionEndpoint) GetIpAddr() string {
	if x != nil {
		return x.IpAddr
	}
	return ""
}

func (x *ConnectionEndpoint) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ConnectionEndpoint) GetProtocol() ConnectionEndpoint_Protocol {
	if x != nil {
		return x.Protocol
	}
	return ConnectionEndpoint_PROTOCOL_UNSPECIFIED
}

type FlowEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The flow identifier (tag). This has to be unique per NodeRecord.
	FlowTag uint32 `protobuf:"varint,1,opt,name=flow_tag,json=flowTag,proto3" json:"flow_tag,omitempty"`
	// The IP/port for this flow.
	Endpoint *ConnectionEndpoint `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *FlowEndpoint) Reset() {
	*x = FlowEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowEndpoint) ProtoMessage() {}

func (x *FlowEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowEndpoint.ProtoReflect.Descriptor instead.
func (*FlowEndpoint) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{1}
}

func (x *FlowEndpoint) GetFlowTag() uint32 {
	if x != nil {
		return x.FlowTag
	}
	return 0
}

func (x *FlowEndpoint) GetEndpoint() *ConnectionEndpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

// A node: one machine running a replica instance.
type NodeRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The endpoint where this node receives xnet messages.
	Xnet *ConnectionEndpoint `protobuf:"bytes,5,opt,name=xnet,proto3" json:"xnet,omitempty"`
	// The endpoint where this node receives http requests.
	Http *ConnectionEndpoint `protobuf:"bytes,6,opt,name=http,proto3" json:"http,omitempty"`
	// The P2P flow end points.
	P2PFlowEndpoints []*FlowEndpoint `protobuf:"bytes,8,rep,name=p2p_flow_endpoints,json=p2pFlowEndpoints,proto3" json:"p2p_flow_endpoints,omitempty"`
	// Endpoint where the node provides Prometheus format metrics over HTTP
	PrometheusMetricsHttp *ConnectionEndpoint `protobuf:"bytes,10,opt,name=prometheus_metrics_http,json=prometheusMetricsHttp,proto3" json:"prometheus_metrics_http,omitempty"`
	// Endpoints on which the public API is served.
	PublicApi []*ConnectionEndpoint `protobuf:"bytes,11,rep,name=public_api,json=publicApi,proto3" json:"public_api,omitempty"`
	// Endpoints on which private APIs are served.
	PrivateApi []*ConnectionEndpoint `protobuf:"bytes,12,rep,name=private_api,json=privateApi,proto3" json:"private_api,omitempty"`
	// Endpoints on which metrics compatible with the Prometheus export
	// format are served.
	PrometheusMetrics []*ConnectionEndpoint `protobuf:"bytes,13,rep,name=prometheus_metrics,json=prometheusMetrics,proto3" json:"prometheus_metrics,omitempty"`
	// Endpoints on which the XNet API is served
	XnetApi []*ConnectionEndpoint `protobuf:"bytes,14,rep,name=xnet_api,json=xnetApi,proto3" json:"xnet_api,omitempty"`
	// The id of the node operator that added this node.
	NodeOperatorId []byte `protobuf:"bytes,15,opt,name=node_operator_id,json=nodeOperatorId,proto3" json:"node_operator_id,omitempty"`
}

func (x *NodeRecord) Reset() {
	*x = NodeRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRecord) ProtoMessage() {}

func (x *NodeRecord) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRecord.ProtoReflect.Descriptor instead.
func (*NodeRecord) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{2}
}

func (x *NodeRecord) GetXnet() *ConnectionEndpoint {
	if x != nil {
		return x.Xnet
	}
	return nil
}

func (x *NodeRecord) GetHttp() *ConnectionEndpoint {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *NodeRecord) GetP2PFlowEndpoints() []*FlowEndpoint {
	if x != nil {
		return x.P2PFlowEndpoints
	}
	return nil
}

func (x *NodeRecord) GetPrometheusMetricsHttp() *ConnectionEndpoint {
	if x != nil {
		return x.PrometheusMetricsHttp
	}
	return nil
}

func (x *NodeRecord) GetPublicApi() []*ConnectionEndpoint {
	if x != nil {
		return x.PublicApi
	}
	return nil
}

func (x *NodeRecord) GetPrivateApi() []*ConnectionEndpoint {
	if x != nil {
		return x.PrivateApi
	}
	return nil
}

func (x *NodeRecord) GetPrometheusMetrics() []*ConnectionEndpoint {
	if x != nil {
		return x.PrometheusMetrics
	}
	return nil
}

func (x *NodeRecord) GetXnetApi() []*ConnectionEndpoint {
	if x != nil {
		return x.XnetApi
	}
	return nil
}

func (x *NodeRecord) GetNodeOperatorId() []byte {
	if x != nil {
		return x.NodeOperatorId
	}
	return nil
}

var File_node_proto protoreflect.FileDescriptor

var file_node_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x22, 0xfd,
	0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x49, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x6f, 0x0a,
	0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f,
	0x48, 0x54, 0x54, 0x50, 0x31, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x31, 0x5f, 0x54, 0x4c, 0x53, 0x5f, 0x31, 0x5f,
	0x33, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f,
	0x50, 0x32, 0x50, 0x31, 0x5f, 0x54, 0x4c, 0x53, 0x5f, 0x31, 0x5f, 0x33, 0x10, 0x03, 0x22, 0x6b,
	0x0a, 0x0c, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x12, 0x40, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x83, 0x06, 0x0a, 0x0a,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x38, 0x0a, 0x04, 0x78, 0x6e,
	0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x04,
	0x78, 0x6e, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x4c,
	0x0a, 0x12, 0x70, 0x32, 0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x10, 0x70, 0x32, 0x70, 0x46,
	0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x5c, 0x0a, 0x17,
	0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x48, 0x74, 0x74, 0x70, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x70, 0x69, 0x12,
	0x45, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x12, 0x53, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74,
	0x68, 0x65, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74,
	0x68, 0x65, 0x75, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3f, 0x0a, 0x08, 0x78,
	0x6e, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x07, 0x78, 0x6e, 0x65, 0x74, 0x41, 0x70, 0x69, 0x12, 0x28, 0x0a, 0x10,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02,
	0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04,
	0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x52, 0x0d, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x52, 0x0e, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0f, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x52, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74,
	0x6c, 0x73, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x11,
	0x64, 0x63, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_node_proto_rawDescOnce sync.Once
	file_node_proto_rawDescData = file_node_proto_rawDesc
)

func file_node_proto_rawDescGZIP() []byte {
	file_node_proto_rawDescOnce.Do(func() {
		file_node_proto_rawDescData = protoimpl.X.CompressGZIP(file_node_proto_rawDescData)
	})
	return file_node_proto_rawDescData
}

var file_node_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_node_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_node_proto_goTypes = []interface{}{
	(ConnectionEndpoint_Protocol)(0), // 0: registry.node.v1.ConnectionEndpoint.Protocol
	(*ConnectionEndpoint)(nil),       // 1: registry.node.v1.ConnectionEndpoint
	(*FlowEndpoint)(nil),             // 2: registry.node.v1.FlowEndpoint
	(*NodeRecord)(nil),               // 3: registry.node.v1.NodeRecord
}
var file_node_proto_depIdxs = []int32{
	0,  // 0: registry.node.v1.ConnectionEndpoint.protocol:type_name -> registry.node.v1.ConnectionEndpoint.Protocol
	1,  // 1: registry.node.v1.FlowEndpoint.endpoint:type_name -> registry.node.v1.ConnectionEndpoint
	1,  // 2: registry.node.v1.NodeRecord.xnet:type_name -> registry.node.v1.ConnectionEndpoint
	1,  // 3: registry.node.v1.NodeRecord.http:type_name -> registry.node.v1.ConnectionEndpoint
	2,  // 4: registry.node.v1.NodeRecord.p2p_flow_endpoints:type_name -> registry.node.v1.FlowEndpoint
	1,  // 5: registry.node.v1.NodeRecord.prometheus_metrics_http:type_name -> registry.node.v1.ConnectionEndpoint
	1,  // 6: registry.node.v1.NodeRecord.public_api:type_name -> registry.node.v1.ConnectionEndpoint
	1,  // 7: registry.node.v1.NodeRecord.private_api:type_name -> registry.node.v1.ConnectionEndpoint
	1,  // 8: registry.node.v1.NodeRecord.prometheus_metrics:type_name -> registry.node.v1.ConnectionEndpoint
	1,  // 9: registry.node.v1.NodeRecord.xnet_api:type_name -> registry.node.v1.ConnectionEndpoint
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_node_proto_init() }
func file_node_proto_init() {
	if File_node_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_node_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_node_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_node_proto_goTypes,
		DependencyIndexes: file_node_proto_depIdxs,
		EnumInfos:         file_node_proto_enumTypes,
		MessageInfos:      file_node_proto_msgTypes,
	}.Build()
	File_node_proto = out.File
	file_node_proto_rawDesc = nil
	file_node_proto_goTypes = nil
	file_node_proto_depIdxs = nil
}
