// Protocol buffer mirror of `ic_crypto_tree_hash::MixedHashTree`.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.2
// source: mixed_hash_tree.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A tree containing both data and merkle proofs.
type MixedHashTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TreeEnum:
	//	*MixedHashTree_Empty
	//	*MixedHashTree_Fork_
	//	*MixedHashTree_Labeled_
	//	*MixedHashTree_LeafData
	//	*MixedHashTree_PrunedDigest
	TreeEnum isMixedHashTree_TreeEnum `protobuf_oneof:"tree_enum"`
}

func (x *MixedHashTree) Reset() {
	*x = MixedHashTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixed_hash_tree_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MixedHashTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MixedHashTree) ProtoMessage() {}

func (x *MixedHashTree) ProtoReflect() protoreflect.Message {
	mi := &file_mixed_hash_tree_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MixedHashTree.ProtoReflect.Descriptor instead.
func (*MixedHashTree) Descriptor() ([]byte, []int) {
	return file_mixed_hash_tree_proto_rawDescGZIP(), []int{0}
}

func (m *MixedHashTree) GetTreeEnum() isMixedHashTree_TreeEnum {
	if m != nil {
		return m.TreeEnum
	}
	return nil
}

func (x *MixedHashTree) GetEmpty() *emptypb.Empty {
	if x, ok := x.GetTreeEnum().(*MixedHashTree_Empty); ok {
		return x.Empty
	}
	return nil
}

func (x *MixedHashTree) GetFork() *MixedHashTree_Fork {
	if x, ok := x.GetTreeEnum().(*MixedHashTree_Fork_); ok {
		return x.Fork
	}
	return nil
}

func (x *MixedHashTree) GetLabeled() *MixedHashTree_Labeled {
	if x, ok := x.GetTreeEnum().(*MixedHashTree_Labeled_); ok {
		return x.Labeled
	}
	return nil
}

func (x *MixedHashTree) GetLeafData() []byte {
	if x, ok := x.GetTreeEnum().(*MixedHashTree_LeafData); ok {
		return x.LeafData
	}
	return nil
}

func (x *MixedHashTree) GetPrunedDigest() []byte {
	if x, ok := x.GetTreeEnum().(*MixedHashTree_PrunedDigest); ok {
		return x.PrunedDigest
	}
	return nil
}

type isMixedHashTree_TreeEnum interface {
	isMixedHashTree_TreeEnum()
}

type MixedHashTree_Empty struct {
	Empty *emptypb.Empty `protobuf:"bytes,1,opt,name=empty,proto3,oneof"`
}

type MixedHashTree_Fork_ struct {
	Fork *MixedHashTree_Fork `protobuf:"bytes,2,opt,name=fork,proto3,oneof"`
}

type MixedHashTree_Labeled_ struct {
	Labeled *MixedHashTree_Labeled `protobuf:"bytes,3,opt,name=labeled,proto3,oneof"`
}

type MixedHashTree_LeafData struct {
	LeafData []byte `protobuf:"bytes,4,opt,name=leaf_data,json=leafData,proto3,oneof"`
}

type MixedHashTree_PrunedDigest struct {
	PrunedDigest []byte `protobuf:"bytes,5,opt,name=pruned_digest,json=prunedDigest,proto3,oneof"`
}

func (*MixedHashTree_Empty) isMixedHashTree_TreeEnum() {}

func (*MixedHashTree_Fork_) isMixedHashTree_TreeEnum() {}

func (*MixedHashTree_Labeled_) isMixedHashTree_TreeEnum() {}

func (*MixedHashTree_LeafData) isMixedHashTree_TreeEnum() {}

func (*MixedHashTree_PrunedDigest) isMixedHashTree_TreeEnum() {}

type MixedHashTree_Fork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftTree  *MixedHashTree `protobuf:"bytes,1,opt,name=left_tree,json=leftTree,proto3" json:"left_tree,omitempty"`
	RightTree *MixedHashTree `protobuf:"bytes,2,opt,name=right_tree,json=rightTree,proto3" json:"right_tree,omitempty"`
}

func (x *MixedHashTree_Fork) Reset() {
	*x = MixedHashTree_Fork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixed_hash_tree_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MixedHashTree_Fork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MixedHashTree_Fork) ProtoMessage() {}

func (x *MixedHashTree_Fork) ProtoReflect() protoreflect.Message {
	mi := &file_mixed_hash_tree_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MixedHashTree_Fork.ProtoReflect.Descriptor instead.
func (*MixedHashTree_Fork) Descriptor() ([]byte, []int) {
	return file_mixed_hash_tree_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MixedHashTree_Fork) GetLeftTree() *MixedHashTree {
	if x != nil {
		return x.LeftTree
	}
	return nil
}

func (x *MixedHashTree_Fork) GetRightTree() *MixedHashTree {
	if x != nil {
		return x.RightTree
	}
	return nil
}

type MixedHashTree_Labeled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label   []byte         `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Subtree *MixedHashTree `protobuf:"bytes,2,opt,name=subtree,proto3" json:"subtree,omitempty"`
}

func (x *MixedHashTree_Labeled) Reset() {
	*x = MixedHashTree_Labeled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mixed_hash_tree_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MixedHashTree_Labeled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MixedHashTree_Labeled) ProtoMessage() {}

func (x *MixedHashTree_Labeled) ProtoReflect() protoreflect.Message {
	mi := &file_mixed_hash_tree_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MixedHashTree_Labeled.ProtoReflect.Descriptor instead.
func (*MixedHashTree_Labeled) Descriptor() ([]byte, []int) {
	return file_mixed_hash_tree_proto_rawDescGZIP(), []int{0, 1}
}

func (x *MixedHashTree_Labeled) GetLabel() []byte {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *MixedHashTree_Labeled) GetSubtree() *MixedHashTree {
	if x != nil {
		return x.Subtree
	}
	return nil
}

var File_mixed_hash_tree_proto protoreflect.FileDescriptor

var file_mixed_hash_tree_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x72, 0x65,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x2e, 0x78, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfb, 0x03, 0x0a, 0x0d, 0x4d, 0x69, 0x78, 0x65,
	0x64, 0x48, 0x61, 0x73, 0x68, 0x54, 0x72, 0x65, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x04, 0x66, 0x6f, 0x72,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x2e, 0x78, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x78, 0x65,
	0x64, 0x48, 0x61, 0x73, 0x68, 0x54, 0x72, 0x65, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x48, 0x00,
	0x52, 0x04, 0x66, 0x6f, 0x72, 0x6b, 0x12, 0x44, 0x0a, 0x07, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x2e, 0x78, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x78, 0x65,
	0x64, 0x48, 0x61, 0x73, 0x68, 0x54, 0x72, 0x65, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x09,
	0x6c, 0x65, 0x61, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0d, 0x70,
	0x72, 0x75, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x64, 0x44, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x1a, 0x86, 0x01, 0x0a, 0x04, 0x46, 0x6f, 0x72, 0x6b, 0x12, 0x3d, 0x0a, 0x09, 0x6c,
	0x65, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x78, 0x6e, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x54, 0x72, 0x65, 0x65,
	0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x54, 0x72, 0x65, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x78, 0x6e, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x54, 0x72, 0x65, 0x65,
	0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x72, 0x65, 0x65, 0x1a, 0x5b, 0x0a, 0x07, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x3a, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x78, 0x6e, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x54, 0x72, 0x65, 0x65, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x65,
	0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mixed_hash_tree_proto_rawDescOnce sync.Once
	file_mixed_hash_tree_proto_rawDescData = file_mixed_hash_tree_proto_rawDesc
)

func file_mixed_hash_tree_proto_rawDescGZIP() []byte {
	file_mixed_hash_tree_proto_rawDescOnce.Do(func() {
		file_mixed_hash_tree_proto_rawDescData = protoimpl.X.CompressGZIP(file_mixed_hash_tree_proto_rawDescData)
	})
	return file_mixed_hash_tree_proto_rawDescData
}

var file_mixed_hash_tree_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_mixed_hash_tree_proto_goTypes = []interface{}{
	(*MixedHashTree)(nil),         // 0: messaging.xnet.v1.MixedHashTree
	(*MixedHashTree_Fork)(nil),    // 1: messaging.xnet.v1.MixedHashTree.Fork
	(*MixedHashTree_Labeled)(nil), // 2: messaging.xnet.v1.MixedHashTree.Labeled
	(*emptypb.Empty)(nil),         // 3: google.protobuf.Empty
}
var file_mixed_hash_tree_proto_depIdxs = []int32{
	3, // 0: messaging.xnet.v1.MixedHashTree.empty:type_name -> google.protobuf.Empty
	1, // 1: messaging.xnet.v1.MixedHashTree.fork:type_name -> messaging.xnet.v1.MixedHashTree.Fork
	2, // 2: messaging.xnet.v1.MixedHashTree.labeled:type_name -> messaging.xnet.v1.MixedHashTree.Labeled
	0, // 3: messaging.xnet.v1.MixedHashTree.Fork.left_tree:type_name -> messaging.xnet.v1.MixedHashTree
	0, // 4: messaging.xnet.v1.MixedHashTree.Fork.right_tree:type_name -> messaging.xnet.v1.MixedHashTree
	0, // 5: messaging.xnet.v1.MixedHashTree.Labeled.subtree:type_name -> messaging.xnet.v1.MixedHashTree
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_mixed_hash_tree_proto_init() }
func file_mixed_hash_tree_proto_init() {
	if File_mixed_hash_tree_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mixed_hash_tree_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MixedHashTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixed_hash_tree_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MixedHashTree_Fork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mixed_hash_tree_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MixedHashTree_Labeled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mixed_hash_tree_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*MixedHashTree_Empty)(nil),
		(*MixedHashTree_Fork_)(nil),
		(*MixedHashTree_Labeled_)(nil),
		(*MixedHashTree_LeafData)(nil),
		(*MixedHashTree_PrunedDigest)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mixed_hash_tree_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mixed_hash_tree_proto_goTypes,
		DependencyIndexes: file_mixed_hash_tree_proto_depIdxs,
		MessageInfos:      file_mixed_hash_tree_proto_msgTypes,
	}.Build()
	File_mixed_hash_tree_proto = out.File
	file_mixed_hash_tree_proto_rawDesc = nil
	file_mixed_hash_tree_proto_goTypes = nil
	file_mixed_hash_tree_proto_depIdxs = nil
}
