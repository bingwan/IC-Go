// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.2
// source: subnet.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the type of subnet. Subnets of different type might exhibit different
// behavior, e.g. being more restrictive in what operations are allowed or privileged
// compared to other subnet types.
type SubnetType int32

const (
	SubnetType_SUBNET_TYPE_UNSPECIFIED SubnetType = 0
	// A normal subnet where no restrictions are applied.
	SubnetType_SUBNET_TYPE_APPLICATION SubnetType = 1
	// A more privileged subnet where certain restrictions are applied,
	// like not charging for cycles or restricting who can create and
	// install canisters on it.
	SubnetType_SUBNET_TYPE_SYSTEM SubnetType = 2
	// A subnet type that is like application subnets but can have some
	// additional features.
	SubnetType_SUBNET_TYPE_VERIFIED_APPLICATION SubnetType = 4
)

// Enum value maps for SubnetType.
var (
	SubnetType_name = map[int32]string{
		0: "SUBNET_TYPE_UNSPECIFIED",
		1: "SUBNET_TYPE_APPLICATION",
		2: "SUBNET_TYPE_SYSTEM",
		4: "SUBNET_TYPE_VERIFIED_APPLICATION",
	}
	SubnetType_value = map[string]int32{
		"SUBNET_TYPE_UNSPECIFIED":          0,
		"SUBNET_TYPE_APPLICATION":          1,
		"SUBNET_TYPE_SYSTEM":               2,
		"SUBNET_TYPE_VERIFIED_APPLICATION": 4,
	}
)

func (x SubnetType) Enum() *SubnetType {
	p := new(SubnetType)
	*p = x
	return p
}

func (x SubnetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubnetType) Descriptor() protoreflect.EnumDescriptor {
	return file_subnet_proto_enumTypes[0].Descriptor()
}

func (SubnetType) Type() protoreflect.EnumType {
	return &file_subnet_proto_enumTypes[0]
}

func (x SubnetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubnetType.Descriptor instead.
func (SubnetType) EnumDescriptor() ([]byte, []int) {
	return file_subnet_proto_rawDescGZIP(), []int{0}
}

// A subnet: A logical group of nodes that run consensus
type SubnetRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Membership [][]byte `protobuf:"bytes,3,rep,name=membership,proto3" json:"membership,omitempty"`
	// Maximum amount of bytes per message. This is a hard cap, which means
	// ingress messages greater than the limit will be dropped.
	MaxIngressBytesPerMessage uint64 `protobuf:"varint,5,opt,name=max_ingress_bytes_per_message,json=maxIngressBytesPerMessage,proto3" json:"max_ingress_bytes_per_message,omitempty"`
	// Unit delay for blockmaker (in milliseconds).
	UnitDelayMillis uint64 `protobuf:"varint,7,opt,name=unit_delay_millis,json=unitDelayMillis,proto3" json:"unit_delay_millis,omitempty"`
	// Initial delay for notary (in milliseconds), to give time to rank-0 block
	// propagation.
	InitialNotaryDelayMillis uint64 `protobuf:"varint,8,opt,name=initial_notary_delay_millis,json=initialNotaryDelayMillis,proto3" json:"initial_notary_delay_millis,omitempty"`
	// ID of the Replica version to run
	ReplicaVersionId string `protobuf:"bytes,9,opt,name=replica_version_id,json=replicaVersionId,proto3" json:"replica_version_id,omitempty"`
	// The length of all DKG intervals. The DKG interval length is the number of rounds following the DKG summary.
	DkgIntervalLength uint64 `protobuf:"varint,10,opt,name=dkg_interval_length,json=dkgIntervalLength,proto3" json:"dkg_interval_length,omitempty"`
	// Gossip Config
	GossipConfig *GossipConfig `protobuf:"bytes,13,opt,name=gossip_config,json=gossipConfig,proto3" json:"gossip_config,omitempty"`
	// If set to yes, the subnet starts as a (new) NNS
	StartAsNns bool `protobuf:"varint,14,opt,name=start_as_nns,json=startAsNns,proto3" json:"start_as_nns,omitempty"`
	// The type of subnet.
	SubnetType SubnetType `protobuf:"varint,15,opt,name=subnet_type,json=subnetType,proto3,enum=registry.subnet.v1.SubnetType" json:"subnet_type,omitempty"`
	// The upper bound for the number of dealings we allow in a block.
	DkgDealingsPerBlock uint64 `protobuf:"varint,16,opt,name=dkg_dealings_per_block,json=dkgDealingsPerBlock,proto3" json:"dkg_dealings_per_block,omitempty"`
	// If `true`, the subnet will be halted: it will no longer create or execute blocks.
	IsHalted bool `protobuf:"varint,17,opt,name=is_halted,json=isHalted,proto3" json:"is_halted,omitempty"`
	// Max number of ingress messages per block.
	MaxIngressMessagesPerBlock uint64 `protobuf:"varint,18,opt,name=max_ingress_messages_per_block,json=maxIngressMessagesPerBlock,proto3" json:"max_ingress_messages_per_block,omitempty"`
	// The maximum combined size of the ingress and xnet messages that fit into a block.
	MaxBlockPayloadSize uint64 `protobuf:"varint,19,opt,name=max_block_payload_size,json=maxBlockPayloadSize,proto3" json:"max_block_payload_size,omitempty"`
	// The maximum number of instructions a message can execute.
	// See the comments in `subnet_config.rs` for more details.
	MaxInstructionsPerMessage uint64 `protobuf:"varint,20,opt,name=max_instructions_per_message,json=maxInstructionsPerMessage,proto3" json:"max_instructions_per_message,omitempty"`
	// The maximum number of instructions a round can execute.
	// See the comments in `subnet_config.rs` for more details.
	MaxInstructionsPerRound uint64 `protobuf:"varint,21,opt,name=max_instructions_per_round,json=maxInstructionsPerRound,proto3" json:"max_instructions_per_round,omitempty"`
	// The maximum number of instructions an `install_code` message can execute.
	// See the comments in `subnet_config.rs` for more details.
	MaxInstructionsPerInstallCode uint64 `protobuf:"varint,22,opt,name=max_instructions_per_install_code,json=maxInstructionsPerInstallCode,proto3" json:"max_instructions_per_install_code,omitempty"`
	// Information on whether a feature is supported by this subnet.
	Features *SubnetFeatures `protobuf:"bytes,23,opt,name=features,proto3" json:"features,omitempty"`
	// The number of canisters allowed to be created on this subnet.
	//
	// A value of 0 is equivalent to setting no limit. This also provides an easy way
	// to maintain compatibility of different versions of replica and registry.
	MaxNumberOfCanisters uint64 `protobuf:"varint,24,opt,name=max_number_of_canisters,json=maxNumberOfCanisters,proto3" json:"max_number_of_canisters,omitempty"`
	// The list of public keys whose owners have "readonly" SSH access to all replicas on this subnet,
	// in case it is necessary to perform subnet recovery.
	SshReadonlyAccess []string `protobuf:"bytes,25,rep,name=ssh_readonly_access,json=sshReadonlyAccess,proto3" json:"ssh_readonly_access,omitempty"`
	// The list of public keys whose owners have "backup" SSH access to nodes on the NNS subnet
	// to make sure the NNS can be backed up.
	SshBackupAccess []string `protobuf:"bytes,26,rep,name=ssh_backup_access,json=sshBackupAccess,proto3" json:"ssh_backup_access,omitempty"`
	// ECDSA Config
	EcdsaConfig *EcdsaConfig `protobuf:"bytes,27,opt,name=ecdsa_config,json=ecdsaConfig,proto3" json:"ecdsa_config,omitempty"`
}

func (x *SubnetRecord) Reset() {
	*x = SubnetRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subnet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetRecord) ProtoMessage() {}

func (x *SubnetRecord) ProtoReflect() protoreflect.Message {
	mi := &file_subnet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetRecord.ProtoReflect.Descriptor instead.
func (*SubnetRecord) Descriptor() ([]byte, []int) {
	return file_subnet_proto_rawDescGZIP(), []int{0}
}

func (x *SubnetRecord) GetMembership() [][]byte {
	if x != nil {
		return x.Membership
	}
	return nil
}

func (x *SubnetRecord) GetMaxIngressBytesPerMessage() uint64 {
	if x != nil {
		return x.MaxIngressBytesPerMessage
	}
	return 0
}

func (x *SubnetRecord) GetUnitDelayMillis() uint64 {
	if x != nil {
		return x.UnitDelayMillis
	}
	return 0
}

func (x *SubnetRecord) GetInitialNotaryDelayMillis() uint64 {
	if x != nil {
		return x.InitialNotaryDelayMillis
	}
	return 0
}

func (x *SubnetRecord) GetReplicaVersionId() string {
	if x != nil {
		return x.ReplicaVersionId
	}
	return ""
}

func (x *SubnetRecord) GetDkgIntervalLength() uint64 {
	if x != nil {
		return x.DkgIntervalLength
	}
	return 0
}

func (x *SubnetRecord) GetGossipConfig() *GossipConfig {
	if x != nil {
		return x.GossipConfig
	}
	return nil
}

func (x *SubnetRecord) GetStartAsNns() bool {
	if x != nil {
		return x.StartAsNns
	}
	return false
}

func (x *SubnetRecord) GetSubnetType() SubnetType {
	if x != nil {
		return x.SubnetType
	}
	return SubnetType_SUBNET_TYPE_UNSPECIFIED
}

func (x *SubnetRecord) GetDkgDealingsPerBlock() uint64 {
	if x != nil {
		return x.DkgDealingsPerBlock
	}
	return 0
}

func (x *SubnetRecord) GetIsHalted() bool {
	if x != nil {
		return x.IsHalted
	}
	return false
}

func (x *SubnetRecord) GetMaxIngressMessagesPerBlock() uint64 {
	if x != nil {
		return x.MaxIngressMessagesPerBlock
	}
	return 0
}

func (x *SubnetRecord) GetMaxBlockPayloadSize() uint64 {
	if x != nil {
		return x.MaxBlockPayloadSize
	}
	return 0
}

func (x *SubnetRecord) GetMaxInstructionsPerMessage() uint64 {
	if x != nil {
		return x.MaxInstructionsPerMessage
	}
	return 0
}

func (x *SubnetRecord) GetMaxInstructionsPerRound() uint64 {
	if x != nil {
		return x.MaxInstructionsPerRound
	}
	return 0
}

func (x *SubnetRecord) GetMaxInstructionsPerInstallCode() uint64 {
	if x != nil {
		return x.MaxInstructionsPerInstallCode
	}
	return 0
}

func (x *SubnetRecord) GetFeatures() *SubnetFeatures {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *SubnetRecord) GetMaxNumberOfCanisters() uint64 {
	if x != nil {
		return x.MaxNumberOfCanisters
	}
	return 0
}

func (x *SubnetRecord) GetSshReadonlyAccess() []string {
	if x != nil {
		return x.SshReadonlyAccess
	}
	return nil
}

func (x *SubnetRecord) GetSshBackupAccess() []string {
	if x != nil {
		return x.SshBackupAccess
	}
	return nil
}

func (x *SubnetRecord) GetEcdsaConfig() *EcdsaConfig {
	if x != nil {
		return x.EcdsaConfig
	}
	return nil
}

// Contains the initial DKG transcripts for the subnet and materials to construct a base CUP (i.e.
// a CUP with no dependencies on previous CUPs or blocks). Such CUP materials can be used to
// construct the genesis CUP or a recovery CUP in the event of a subnet stall.
type CatchUpPackageContents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Initial non-interactive low-threshold DKG transcript
	InitialNiDkgTranscriptLowThreshold *InitialNiDkgTranscriptRecord `protobuf:"bytes,1,opt,name=initial_ni_dkg_transcript_low_threshold,json=initialNiDkgTranscriptLowThreshold,proto3" json:"initial_ni_dkg_transcript_low_threshold,omitempty"`
	// Initial non-interactive high-threshold DKG transcript
	InitialNiDkgTranscriptHighThreshold *InitialNiDkgTranscriptRecord `protobuf:"bytes,2,opt,name=initial_ni_dkg_transcript_high_threshold,json=initialNiDkgTranscriptHighThreshold,proto3" json:"initial_ni_dkg_transcript_high_threshold,omitempty"`
	// The blockchain height that the CUP should have
	Height uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	// Block time for the CUP's block
	Time uint64 `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	// The hash of the state that the subnet should use
	StateHash []byte `protobuf:"bytes,5,opt,name=state_hash,json=stateHash,proto3" json:"state_hash,omitempty"`
	// A uri from which data to replace the registry local store should be downloaded
	RegistryStoreUri *RegistryStoreUri `protobuf:"bytes,6,opt,name=registry_store_uri,json=registryStoreUri,proto3" json:"registry_store_uri,omitempty"`
}

func (x *CatchUpPackageContents) Reset() {
	*x = CatchUpPackageContents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subnet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CatchUpPackageContents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CatchUpPackageContents) ProtoMessage() {}

func (x *CatchUpPackageContents) ProtoReflect() protoreflect.Message {
	mi := &file_subnet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CatchUpPackageContents.ProtoReflect.Descriptor instead.
func (*CatchUpPackageContents) Descriptor() ([]byte, []int) {
	return file_subnet_proto_rawDescGZIP(), []int{1}
}

func (x *CatchUpPackageContents) GetInitialNiDkgTranscriptLowThreshold() *InitialNiDkgTranscriptRecord {
	if x != nil {
		return x.InitialNiDkgTranscriptLowThreshold
	}
	return nil
}

func (x *CatchUpPackageContents) GetInitialNiDkgTranscriptHighThreshold() *InitialNiDkgTranscriptRecord {
	if x != nil {
		return x.InitialNiDkgTranscriptHighThreshold
	}
	return nil
}

func (x *CatchUpPackageContents) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *CatchUpPackageContents) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *CatchUpPackageContents) GetStateHash() []byte {
	if x != nil {
		return x.StateHash
	}
	return nil
}

func (x *CatchUpPackageContents) GetRegistryStoreUri() *RegistryStoreUri {
	if x != nil {
		return x.RegistryStoreUri
	}
	return nil
}

type RegistryStoreUri struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// The uri at which the registry store data should be retrieved. The data
	/// must be provided as gzipped tar archive
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	/// A SHA-256, hex encoded hash of the contents of the data stored at the
	/// provided URI
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	/// The registry version that should be used for the catch up package contents
	RegistryVersion uint64 `protobuf:"varint,3,opt,name=registry_version,json=registryVersion,proto3" json:"registry_version,omitempty"`
}

func (x *RegistryStoreUri) Reset() {
	*x = RegistryStoreUri{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subnet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistryStoreUri) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistryStoreUri) ProtoMessage() {}

func (x *RegistryStoreUri) ProtoReflect() protoreflect.Message {
	mi := &file_subnet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistryStoreUri.ProtoReflect.Descriptor instead.
func (*RegistryStoreUri) Descriptor() ([]byte, []int) {
	return file_subnet_proto_rawDescGZIP(), []int{2}
}

func (x *RegistryStoreUri) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *RegistryStoreUri) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *RegistryStoreUri) GetRegistryVersion() uint64 {
	if x != nil {
		return x.RegistryVersion
	}
	return 0
}

// A list of subnet ids of all subnets present in this instance of the IC.
type SubnetListRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnets [][]byte `protobuf:"bytes,2,rep,name=subnets,proto3" json:"subnets,omitempty"`
}

func (x *SubnetListRecord) Reset() {
	*x = SubnetListRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subnet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetListRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetListRecord) ProtoMessage() {}

func (x *SubnetListRecord) ProtoReflect() protoreflect.Message {
	mi := &file_subnet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetListRecord.ProtoReflect.Descriptor instead.
func (*SubnetListRecord) Descriptor() ([]byte, []int) {
	return file_subnet_proto_rawDescGZIP(), []int{3}
}

func (x *SubnetListRecord) GetSubnets() [][]byte {
	if x != nil {
		return x.Subnets
	}
	return nil
}

// Initial non-interactive DKG transcript record
type InitialNiDkgTranscriptRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    *NiDkgId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Threshold             uint32   `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Committee             [][]byte `protobuf:"bytes,3,rep,name=committee,proto3" json:"committee,omitempty"`
	RegistryVersion       uint64   `protobuf:"varint,4,opt,name=registry_version,json=registryVersion,proto3" json:"registry_version,omitempty"`
	InternalCspTranscript []byte   `protobuf:"bytes,5,opt,name=internal_csp_transcript,json=internalCspTranscript,proto3" json:"internal_csp_transcript,omitempty"`
}

func (x *InitialNiDkgTranscriptRecord) Reset() {
	*x = InitialNiDkgTranscriptRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subnet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitialNiDkgTranscriptRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitialNiDkgTranscriptRecord) ProtoMessage() {}

func (x *InitialNiDkgTranscriptRecord) ProtoReflect() protoreflect.Message {
	mi := &file_subnet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitialNiDkgTranscriptRecord.ProtoReflect.Descriptor instead.
func (*InitialNiDkgTranscriptRecord) Descriptor() ([]byte, []int) {
	return file_subnet_proto_rawDescGZIP(), []int{4}
}

func (x *InitialNiDkgTranscriptRecord) GetId() *NiDkgId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *InitialNiDkgTranscriptRecord) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *InitialNiDkgTranscriptRecord) GetCommittee() [][]byte {
	if x != nil {
		return x.Committee
	}
	return nil
}

func (x *InitialNiDkgTranscriptRecord) GetRegistryVersion() uint64 {
	if x != nil {
		return x.RegistryVersion
	}
	return 0
}

func (x *InitialNiDkgTranscriptRecord) GetInternalCspTranscript() []byte {
	if x != nil {
		return x.InternalCspTranscript
	}
	return nil
}

// Per subnet P2P configuration
// Note: protoc is mangling the name P2PConfig to P2pConfig
type GossipConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// max outstanding request per peer MIN/DEFAULT/MAX 1/20/200
	MaxArtifactStreamsPerPeer uint32 `protobuf:"varint,1,opt,name=max_artifact_streams_per_peer,json=maxArtifactStreamsPerPeer,proto3" json:"max_artifact_streams_per_peer,omitempty"`
	// timeout for a outstanding request 3_000/15_000/180_000
	MaxChunkWaitMs uint32 `protobuf:"varint,2,opt,name=max_chunk_wait_ms,json=maxChunkWaitMs,proto3" json:"max_chunk_wait_ms,omitempty"`
	// max duplicate requests in underutilized networks 1/28/6000
	MaxDuplicity uint32 `protobuf:"varint,3,opt,name=max_duplicity,json=maxDuplicity,proto3" json:"max_duplicity,omitempty"`
	// maximum chunk size supported on this subnet 1024/4096/131_072
	MaxChunkSize uint32 `protobuf:"varint,4,opt,name=max_chunk_size,json=maxChunkSize,proto3" json:"max_chunk_size,omitempty"`
	// history size for receive check 1_000/5_000/30_000
	ReceiveCheckCacheSize uint32 `protobuf:"varint,5,opt,name=receive_check_cache_size,json=receiveCheckCacheSize,proto3" json:"receive_check_cache_size,omitempty"`
	// period for re evaluating the priority function. 1_000/3_000/30_000
	PfnEvaluationPeriodMs uint32 `protobuf:"varint,6,opt,name=pfn_evaluation_period_ms,json=pfnEvaluationPeriodMs,proto3" json:"pfn_evaluation_period_ms,omitempty"`
	// period for polling the registry for updates 1_000/3_000/30_000
	RegistryPollPeriodMs uint32 `protobuf:"varint,7,opt,name=registry_poll_period_ms,json=registryPollPeriodMs,proto3" json:"registry_poll_period_ms,omitempty"`
	// period for sending a retransmission request
	RetransmissionRequestMs uint32 `protobuf:"varint,8,opt,name=retransmission_request_ms,json=retransmissionRequestMs,proto3" json:"retransmission_request_ms,omitempty"`
	// config for advert distribution.
	// If this field is not specified, the feature is turned off.
	AdvertConfig *GossipAdvertConfig `protobuf:"bytes,10,opt,name=advert_config,json=advertConfig,proto3" json:"advert_config,omitempty"`
}

func (x *GossipConfig) Reset() {
	*x = GossipConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subnet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GossipConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GossipConfig) ProtoMessage() {}

func (x *GossipConfig) ProtoReflect() protoreflect.Message {
	mi := &file_subnet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GossipConfig.ProtoReflect.Descriptor instead.
func (*GossipConfig) Descriptor() ([]byte, []int) {
	return file_subnet_proto_rawDescGZIP(), []int{5}
}

func (x *GossipConfig) GetMaxArtifactStreamsPerPeer() uint32 {
	if x != nil {
		return x.MaxArtifactStreamsPerPeer
	}
	return 0
}

func (x *GossipConfig) GetMaxChunkWaitMs() uint32 {
	if x != nil {
		return x.MaxChunkWaitMs
	}
	return 0
}

func (x *GossipConfig) GetMaxDuplicity() uint32 {
	if x != nil {
		return x.MaxDuplicity
	}
	return 0
}

func (x *GossipConfig) GetMaxChunkSize() uint32 {
	if x != nil {
		return x.MaxChunkSize
	}
	return 0
}

func (x *GossipConfig) GetReceiveCheckCacheSize() uint32 {
	if x != nil {
		return x.ReceiveCheckCacheSize
	}
	return 0
}

func (x *GossipConfig) GetPfnEvaluationPeriodMs() uint32 {
	if x != nil {
		return x.PfnEvaluationPeriodMs
	}
	return 0
}

func (x *GossipConfig) GetRegistryPollPeriodMs() uint32 {
	if x != nil {
		return x.RegistryPollPeriodMs
	}
	return 0
}

func (x *GossipConfig) GetRetransmissionRequestMs() uint32 {
	if x != nil {
		return x.RetransmissionRequestMs
	}
	return 0
}

func (x *GossipConfig) GetAdvertConfig() *GossipAdvertConfig {
	if x != nil {
		return x.AdvertConfig
	}
	return nil
}

// Per subnet config for advert distribution.
type GossipAdvertConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The subset of peers to broadcast to, specified in percentage.
	// This is only  used when the P2P clients mark the advert as
	// requiring best effort distribution. In future, this fixed
	// percentage could be replaced by dynamic computation of the
	// distribution set size, as a function of subnet size.
	// 0 < best_effort_percentage <= 100
	BestEffortPercentage uint32 `protobuf:"varint,1,opt,name=best_effort_percentage,json=bestEffortPercentage,proto3" json:"best_effort_percentage,omitempty"`
}

func (x *GossipAdvertConfig) Reset() {
	*x = GossipAdvertConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subnet_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GossipAdvertConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GossipAdvertConfig) ProtoMessage() {}

func (x *GossipAdvertConfig) ProtoReflect() protoreflect.Message {
	mi := &file_subnet_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GossipAdvertConfig.ProtoReflect.Descriptor instead.
func (*GossipAdvertConfig) Descriptor() ([]byte, []int) {
	return file_subnet_proto_rawDescGZIP(), []int{6}
}

func (x *GossipAdvertConfig) GetBestEffortPercentage() uint32 {
	if x != nil {
		return x.BestEffortPercentage
	}
	return 0
}

type SubnetFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This feature flag controls, whether canisters of this subnet are capable of
	// issuing threshold ecdsa signatures.
	EcdsaSignatures bool `protobuf:"varint,1,opt,name=ecdsa_signatures,json=ecdsaSignatures,proto3" json:"ecdsa_signatures,omitempty"`
	// This feature flag controls whether canister execution happens
	// in sandboxed process or not. It is disabled by default.
	CanisterSandboxing bool `protobuf:"varint,2,opt,name=canister_sandboxing,json=canisterSandboxing,proto3" json:"canister_sandboxing,omitempty"`
	// This feature flag controls whether canisters of this subnet are capable of
	// performing http(s) requests to the web2.
	HttpRequests bool `protobuf:"varint,3,opt,name=http_requests,json=httpRequests,proto3" json:"http_requests,omitempty"`
}

func (x *SubnetFeatures) Reset() {
	*x = SubnetFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subnet_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetFeatures) ProtoMessage() {}

func (x *SubnetFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_subnet_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetFeatures.ProtoReflect.Descriptor instead.
func (*SubnetFeatures) Descriptor() ([]byte, []int) {
	return file_subnet_proto_rawDescGZIP(), []int{7}
}

func (x *SubnetFeatures) GetEcdsaSignatures() bool {
	if x != nil {
		return x.EcdsaSignatures
	}
	return false
}

func (x *SubnetFeatures) GetCanisterSandboxing() bool {
	if x != nil {
		return x.CanisterSandboxing
	}
	return false
}

func (x *SubnetFeatures) GetHttpRequests() bool {
	if x != nil {
		return x.HttpRequests
	}
	return false
}

// Per subnet P2P configuration
// Note: protoc is mangling the name P2PConfig to P2pConfig
type EcdsaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of quadruples to create in advance.
	QuadruplesToCreateInAdvance uint32 `protobuf:"varint,1,opt,name=quadruples_to_create_in_advance,json=quadruplesToCreateInAdvance,proto3" json:"quadruples_to_create_in_advance,omitempty"`
}

func (x *EcdsaConfig) Reset() {
	*x = EcdsaConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subnet_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcdsaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcdsaConfig) ProtoMessage() {}

func (x *EcdsaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_subnet_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcdsaConfig.ProtoReflect.Descriptor instead.
func (*EcdsaConfig) Descriptor() ([]byte, []int) {
	return file_subnet_proto_rawDescGZIP(), []int{8}
}

func (x *EcdsaConfig) GetQuadruplesToCreateInAdvance() uint32 {
	if x != nil {
		return x.QuadruplesToCreateInAdvance
	}
	return 0
}

var File_subnet_proto protoreflect.FileDescriptor

var file_subnet_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x1a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xee, 0x09, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x12, 0x40, 0x0a, 0x1d, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x75,
	0x6e, 0x69, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x3d,
	0x0a, 0x1b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x61, 0x72, 0x79,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x18, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x61,
	0x72, 0x79, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x64,
	0x6b, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x64, 0x6b, 0x67, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x45, 0x0a, 0x0d, 0x67,
	0x6f, 0x73, 0x73, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x73, 0x5f, 0x6e,
	0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x73, 0x4e, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x6b, 0x67, 0x5f, 0x64, 0x65, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x64, 0x6b, 0x67, 0x44, 0x65, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x73, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x68, 0x61, 0x6c, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x48, 0x61, 0x6c, 0x74, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x1e, 0x6d, 0x61, 0x78, 0x5f, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x1a, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x33, 0x0a, 0x16, 0x6d,
	0x61, 0x78, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6d, 0x61, 0x78,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x3f, 0x0a, 0x1c, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x48,
	0x0a, 0x21, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1d, 0x6d, 0x61, 0x78, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x08,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x61, 0x6e, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x61, 0x6e, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x73, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x73, 0x73,
	0x68, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x73, 0x73, 0x68, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x73, 0x68, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x65,
	0x63, 0x64, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x63, 0x64, 0x73, 0x61, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0b, 0x65, 0x63, 0x64, 0x73, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x02, 0x10,
	0x03, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x52, 0x0d, 0x69, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x52, 0x16, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x64, 0x6b, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x20,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x63, 0x61, 0x70,
	0x22, 0xc9, 0x03, 0x0a, 0x16, 0x43, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x27,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x69, 0x5f, 0x64, 0x6b, 0x67, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x69, 0x44, 0x6b, 0x67, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x22, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x69, 0x44, 0x6b, 0x67, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x6f, 0x77, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x87, 0x01, 0x0a, 0x28, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x6e, 0x69, 0x5f, 0x64, 0x6b, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x2e, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x4e, 0x69, 0x44, 0x6b, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x23, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x4e, 0x69, 0x44, 0x6b, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x48, 0x69, 0x67, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x52, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69, 0x22, 0x63, 0x0a, 0x10,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x69,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x32, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0xe0, 0x01, 0x0a, 0x1c, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x4e, 0x69, 0x44, 0x6b, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x69,
	0x44, 0x6b, 0x67, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x73, 0x70,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x73, 0x70, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x8c, 0x04, 0x0a, 0x0c, 0x47, 0x6f, 0x73,
	0x73, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x1d, 0x6d, 0x61, 0x78,
	0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x19, 0x6d, 0x61, 0x78, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x50, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x11, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x57, 0x61, 0x69, 0x74, 0x4d, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d,
	0x61, 0x78, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x66,
	0x6e, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x70, 0x66,
	0x6e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x4d, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f,
	0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x6d, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x50, 0x6f,
	0x6c, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x72,
	0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x12, 0x4b, 0x0a, 0x0d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x4a, 0x0a, 0x12, 0x47, 0x6f, 0x73, 0x73, 0x69,
	0x70, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a,
	0x16, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x62,
	0x65, 0x73, 0x74, 0x45, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x63, 0x64, 0x73, 0x61, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x65, 0x63, 0x64, 0x73, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x61, 0x6e, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x61,
	0x6e, 0x64, 0x62, 0x6f, 0x78, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x63, 0x61, 0x6e, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x69,
	0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x53, 0x0a, 0x0b, 0x45, 0x63, 0x64, 0x73, 0x61,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44, 0x0a, 0x1f, 0x71, 0x75, 0x61, 0x64, 0x72, 0x75,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1b, 0x71, 0x75, 0x61, 0x64, 0x72, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x2a, 0xab, 0x01, 0x0a,
	0x0a, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53,
	0x55, 0x42, 0x4e, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x55, 0x42, 0x4e,
	0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x55, 0x42, 0x4e, 0x45, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x02, 0x12, 0x24, 0x0a,
	0x20, 0x53, 0x55, 0x42, 0x4e, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x45, 0x52,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x04, 0x22, 0x04, 0x08, 0x03, 0x10, 0x03, 0x2a, 0x1f, 0x53, 0x55, 0x42, 0x4e, 0x45,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x55, 0x4d, 0x5f, 0x41,
	0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_subnet_proto_rawDescOnce sync.Once
	file_subnet_proto_rawDescData = file_subnet_proto_rawDesc
)

func file_subnet_proto_rawDescGZIP() []byte {
	file_subnet_proto_rawDescOnce.Do(func() {
		file_subnet_proto_rawDescData = protoimpl.X.CompressGZIP(file_subnet_proto_rawDescData)
	})
	return file_subnet_proto_rawDescData
}

var file_subnet_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_subnet_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_subnet_proto_goTypes = []interface{}{
	(SubnetType)(0),                      // 0: registry.subnet.v1.SubnetType
	(*SubnetRecord)(nil),                 // 1: registry.subnet.v1.SubnetRecord
	(*CatchUpPackageContents)(nil),       // 2: registry.subnet.v1.CatchUpPackageContents
	(*RegistryStoreUri)(nil),             // 3: registry.subnet.v1.RegistryStoreUri
	(*SubnetListRecord)(nil),             // 4: registry.subnet.v1.SubnetListRecord
	(*InitialNiDkgTranscriptRecord)(nil), // 5: registry.subnet.v1.InitialNiDkgTranscriptRecord
	(*GossipConfig)(nil),                 // 6: registry.subnet.v1.GossipConfig
	(*GossipAdvertConfig)(nil),           // 7: registry.subnet.v1.GossipAdvertConfig
	(*SubnetFeatures)(nil),               // 8: registry.subnet.v1.SubnetFeatures
	(*EcdsaConfig)(nil),                  // 9: registry.subnet.v1.EcdsaConfig
	(*NiDkgId)(nil),                      // 10: types.v1.NiDkgId
}
var file_subnet_proto_depIdxs = []int32{
	6,  // 0: registry.subnet.v1.SubnetRecord.gossip_config:type_name -> registry.subnet.v1.GossipConfig
	0,  // 1: registry.subnet.v1.SubnetRecord.subnet_type:type_name -> registry.subnet.v1.SubnetType
	8,  // 2: registry.subnet.v1.SubnetRecord.features:type_name -> registry.subnet.v1.SubnetFeatures
	9,  // 3: registry.subnet.v1.SubnetRecord.ecdsa_config:type_name -> registry.subnet.v1.EcdsaConfig
	5,  // 4: registry.subnet.v1.CatchUpPackageContents.initial_ni_dkg_transcript_low_threshold:type_name -> registry.subnet.v1.InitialNiDkgTranscriptRecord
	5,  // 5: registry.subnet.v1.CatchUpPackageContents.initial_ni_dkg_transcript_high_threshold:type_name -> registry.subnet.v1.InitialNiDkgTranscriptRecord
	3,  // 6: registry.subnet.v1.CatchUpPackageContents.registry_store_uri:type_name -> registry.subnet.v1.RegistryStoreUri
	10, // 7: registry.subnet.v1.InitialNiDkgTranscriptRecord.id:type_name -> types.v1.NiDkgId
	7,  // 8: registry.subnet.v1.GossipConfig.advert_config:type_name -> registry.subnet.v1.GossipAdvertConfig
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_subnet_proto_init() }
func file_subnet_proto_init() {
	if File_subnet_proto != nil {
		return
	}
	file_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_subnet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subnet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CatchUpPackageContents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subnet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistryStoreUri); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subnet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetListRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subnet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitialNiDkgTranscriptRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subnet_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GossipConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subnet_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GossipAdvertConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subnet_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subnet_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EcdsaConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_subnet_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_subnet_proto_goTypes,
		DependencyIndexes: file_subnet_proto_depIdxs,
		EnumInfos:         file_subnet_proto_enumTypes,
		MessageInfos:      file_subnet_proto_msgTypes,
	}.Build()
	File_subnet_proto = out.File
	file_subnet_proto_rawDesc = nil
	file_subnet_proto_goTypes = nil
	file_subnet_proto_depIdxs = nil
}
